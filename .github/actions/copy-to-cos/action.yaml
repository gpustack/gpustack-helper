name: 'Upload Release to Tencent COS'
description: 'Mirror the Github Release to Tencent COS.'

inputs:
  tencent-secret-id:
    description: 'Tencent Cloud secret ID which can upload release assets to COS.'
    required: true
  tencent-secret-key:
    description: 'Tencent Cloud secret key which belong to the secret ID.'
    required: true
  tencent-cos-region:
    description: 'Tencent COS region where the bucket belong to.'
    required: false
    default: 'ap-guangzhou'
  tencent-cos-bucket:
    description: 'Tencent COS available bucket ID.'
    required: false
    default: 'gpustack-1303613262'
  tencent-cos-path-prefix:
    description: 'Tencent COS path prefix where the release assets will be uploaded to.
      If not set, the default path will be "<github-repository>/releases/download/<tag_name>".'
    required: false
    default: '${{ github.repository }}/releases/download/'
  max-releases: 
    description: 'Maximum number of the latest releases to mirror.'
    required: false
    default: '1'
  specific-release-tag:
    description: 'Tag name of the specific release to mirror, take precedence over max releases.'
    required: false
    default: ''
  sync-file-path:
    description: 'File paths to upload, if not set, all files in the current directory will be uploaded.'
    required: false
    default: ''
  github-token:
    description: 'Github token to download release assets from Github repository, usually inherit from the composition action.'
    required: false
    default: ''
  github-repository:
    description: 'Source Github repository, inform of "owner/name", usually inherit from the composition action.'
    required: false
    default: ''
  dry-run:
    description: 'Skip writing operations.'
    required: false
    default: 'false'

runs:
  using: "composite"
  steps:
    - name: Sync
      shell: bash
      env:
        TENCENT_SECRET_ID: "${{ inputs.tencent-secret-id }}"
        TENCENT_SECRET_KEY: "${{ inputs.tencent-secret-key }}"
        TENCENT_COS_REGION: "${{ inputs.tencent-cos-region }}"
        TENCENT_COS_BUCKET: "${{ inputs.tencent-cos-bucket }}"
        TENCENT_COS_PATH_PREFIX: "${{ inputs.tencent-cos-path-prefix }}"
        MAX_RELEASES: "${{ inputs.max-releases }}"
        SPECIFIC_RELEASE_TAG: "${{ inputs.specific-release-tag }}"
        SYNC_FILE_PATH: "${{ inputs.sync-file-path }}"
        GITHUB_TOKEN: "${{ inputs.github-token && inputs.github-token || github.token }}"
        GITHUB_REPOSITORY: "${{ inputs.github-repository && inputs.github-repository || github.repository }}"
        DRY_RUN: "${{ inputs.dry-run == 'true' }}"
      run: |
        #!/usr/bin/env bash
          
        set -e

        shopt -s expand_aliases
        alias gh="gh --repo ${GITHUB_REPOSITORY}"
        alias curl="curl --insecure --silent --retry 3"
        alias jq="jq -c"

        info() {
          echo "[INFO] $*"
        }
        warn() {
          echo "[WARN] $*"
        }
        error() {
          echo "[ERRO] $*"
        }
        fatal() {
          echo "[FATA] $*"
          exit 1
        }

        release() {
          SYNC_DIR_NAME="$1"
          info "  Syncing Tencent COS release ${SYNC_DIR_NAME}..."
          # download assets
          info "    Downloading assets..."
          gh release download ${SYNC_DIR_NAME} --dir /tmp/${SYNC_DIR_NAME} >/dev/null && ls -lh /tmp/${SYNC_DIR_NAME}/*
          # upload assets to tencentcos
          info "    Syncing assets..."
          if [[ "${DRY_RUN}" == "false" ]]; then
            coscli sync /tmp/${SYNC_DIR_NAME}/ cos://${TENCENT_COS_BUCKET}/${TENCENT_COS_PATH_PREFIX}${SYNC_DIR_NAME}/ --err-retry-num 3 --err-retry-interval 3 --recursive
          fi
          # cleanup
          rm -rf /tmp/${SYNC_DIR_NAME}
          info "  TencentCOS release ${SYNC_DIR_NAME} synced."
        }

        info "Configuring Tencent COS CLI..."
        curl -o /tmp/coscli -L -X GET https://github.com/tencentyun/coscli/releases/download/v1.0.1/coscli-v1.0.1-linux-amd64 && chmod a+x /tmp/coscli
        export PATH="/tmp:${PATH}"
        coscli config set --secret_id "${TENCENT_SECRET_ID}" --secret_key "${TENCENT_SECRET_KEY}" --init-skip
        coscli config add -b "${TENCENT_COS_BUCKET}" -r "${TENCENT_COS_REGION}" --init-skip

        info "Releasing to Tencent COS bucket..."
        # create tencentcos release if not exists
        if [[ -n "${SYNC_FILE_PATH}" ]]; then
          SYNC_DIR_NAME=$(basename "${SYNC_FILE_PATH}")
          info "  Syncing target dir ${SYNC_DIR_NAME} to Tencent COS..."
          # upload assets to tencentcos
          info "    Uploading assets..."
          if [[ "${DRY_RUN}" == "false" ]]; then
          info "      Syncing content in ${SYNC_FILE_PATH} to cos://${TENCENT_COS_BUCKET}/${TENCENT_COS_PATH_PREFIX}"
            coscli sync "${SYNC_FILE_PATH}/" "cos://${TENCENT_COS_BUCKET}/${TENCENT_COS_PATH_PREFIX}" --err-retry-num 3 --err-retry-interval 3 --recursive
          fi
          info "  TencentCOS release ${SYNC_DIR_NAME} synced."
        elif [[ -n "${SPECIFIC_RELEASE_TAG}" ]]; then
          release "${SPECIFIC_RELEASE_TAG}"
        else
          gh release list --json tagName,isDraft --order desc --limit ${MAX_RELEASES} | jq -r 'reverse | .[]' | while read -r release; do
            RELEASE_TAG=$(echo "${release}" | jq -r '.tagName')
            if [[ "$(echo "${release}" | jq -r '.isDraft')" == "true" ]]; then
              warn "  Skipped creating invalid release ${RELEASE_TAG}, continue..."
              continue
            fi
            release "${RELEASE_TAG}"
          done
        fi
