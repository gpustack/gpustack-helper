name: Common CI Steps

on:
  workflow_call:
    inputs:
      python-version:
        required: false
        type: string
        default: '3.10'
      upload-artifacts:
        required: false
        type: boolean
        default: false
      setup-certificate:
        required: false
        type: boolean
        default: false
      pr:
        description: 'Whether this is a pull request'
        required: false
        type: boolean
        default: false
      macos-toolkit-name:
        description: 'The name of the toolkit to use for macOS builds'
        type: string
        required: false
        default: "mps"
      windows-toolkit-name:
        description: 'The name of the toolkit to use for Windows builds'
        type: string
        required: false
    secrets:
      P12_BASE64:
        required: false
      P12_PASSWORD:
        required: false
      INSTALLER_P12_BASE64:
        required: false
      KEYCHAIN_PASSWORD:
        required: false
      APPLE_ID:
        required: false
      APP_PASSWORD:
        required: false

env:
  CODESIGN_IDENTITY: "${{ inputs.setup-certificate && 'Developer ID Application: Seal Software Co., Ltd. (33M7PPLX4U)' || '' }}"
jobs:
  ci-macos:
    env:
      TOOLKIT_NAME: ${{ inputs.macos-toolkit-name }}
    runs-on: macos-latest
    steps:
      - name: Install the Apple certificate
        if: ${{ inputs.setup-certificate }}
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.P12_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          INSTALLER__CERTIFICATE_BASE64: ${{ secrets.INSTALLER_P12_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          INSTALLER_CERTIFICATE_PATH=$RUNNER_TEMP/installer_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$INSTALLER__CERTIFICATE_BASE64" | base64 --decode -o $INSTALLER_CERTIFICATE_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security import $INSTALLER_CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Dummy Version File
        run: echo "__version__ = '0.0.0'" > gpustack_helper/_version.py
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.3
          plugins: |
            poetry-dynamic-versioning
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Caches/pypoetry/artifacts
            ~/Library/Caches/pypoetry/repository
            ~/Library/Caches/pypoetry/virtualenvs
          key: ${{ runner.os }}-poetry-${{ inputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-${{ inputs.python-version }}-
      - name: Cache OpenFST
        id: cache-openfst
        uses: actions/cache@v3
        with:
          path: |
            /opt/homebrew/lib/libfst*
            /opt/homebrew/lib/fst
            /opt/homebrew/include/fst
          key: ${{ runner.os }}-openfstlib-${{ hashFiles('hack/build-openfst.sh') }}-${{ hashFiles('hack/patch/openfst.patch') }}
      - name: Cache LlamaBox
        id: cache-llama-box
        uses: actions/cache@v3
        with:
          path: |
            build/cache
          key: ${{ runner.os }}-llama-box-${{ hashFiles('**/poetry.lock') }}-${{ inputs.macos-toolkit-name }}
      - name: Run CI build
        id: run_ci
        env:
          APPLE_ID: ${{ inputs.setup-certificate && secrets.APPLE_ID || '' }}
          APP_PASSWORD: ${{ inputs.setup-certificate && secrets.APP_PASSWORD || '' }}
          INSTALL_PREFIX: /opt/homebrew
        run: |
          make ci
      - name: upload-artifacts
        if: ${{ inputs.upload-artifacts }}
        uses: actions/upload-artifact@v4
        with:
          path: |
            dist/gpustack-${{steps.run_ci.outputs.GIT_VERSION }}.pkg
          name: build-${{runner.os}}

  ci-windows:
    env:
      TOOLKIT_NAME: ${{ inputs.windows-toolkit-name || '' }}
    runs-on: windows-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Dummy Version File
        run: echo "__version__ = '0.0.0'" > gpustack_helper/_version.py
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.3
          plugins: |
            poetry-dynamic-versioning
      - name: Cache LlamaBox
        id: cache-llama-box
        uses: actions/cache@v3
        with:
          path: |
            build/cache
          key: ${{ runner.os }}-llama-box-${{ hashFiles('**/poetry.lock') }}-${{ inputs.windows-toolkit-name || '' }}

      - name: CI
        run: |
          make install
          make lint
          make build

      - name: Package
        if: ${{ inputs.pr == false }}
        run: |
          make package

      - name: upload-artifacts
        if: ${{ inputs.upload-artifacts }}
        uses: actions/upload-artifact@v4
        with:
          path: |
            dist/*.msi
          name: build-${{runner.os}}
